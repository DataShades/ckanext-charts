{"config":{"lang":["en"],"separator":"[\\s\\-\\.\\_]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#ckanext-charts","title":"ckanext-charts","text":"<p>This extension, ckanext-charts, provides additional functionality for working with charts in CKAN. It allows users to create, manage, and visualize charts based on data stored in CKAN datasets.</p> <p>The extension includes features such as chart creation, chart editing, chart embedding, and chart sharing. It also supports various chart types, including bar charts, line charts, pie charts, and more.</p> <p>With ckanext-charts, users can easily generate interactive and visually appealing charts to enhance data analysis and presentation in CKAN.</p> <p>See the documentation for more information.</p>"},{"location":"#quick-start","title":"Quick start","text":"<ul> <li>Install it with <code>PyPi</code> with <code>pip install ckanext-charts[pyarrow]</code></li> <li>Add <code>charts_view</code> to the list of plugins in your CKAN config (<code>ckan.plugins = charts_view charts_builder_view</code>)</li> </ul>"},{"location":"#developer-installation","title":"Developer installation","text":"<p>To install <code>ckanext-charts</code> for development, activate your CKAN virtualenv and do:</p> <pre><code>git clone https://github.com/DataShades/ckanext-charts.git\ncd ckanext-charts\npip install -e '.[dev]'\n</code></pre>"},{"location":"#tests","title":"Tests","text":"<p>To run the tests, do:</p> <pre><code>pytest --ckan-ini=test.ini\n</code></pre>"},{"location":"#building-the-documentation","title":"Building the documentation","text":"<p>We are using <code>mkdocs</code> to build the documentation. To build and deploy the documentation, do:</p> <pre><code>CHARTS_FIELDS=1 mkdocs build &amp;&amp; mkdocs gh-deploy\n</code></pre> <p>We need to set the <code>CHARTS_FIELDS</code> for our custom handler, that autogenerate documentation for chart types fields.</p> <p>The CKAN instance will be initialized, because we will call validators and helpers in this code. Therefore, you'll need another environment variable to set the CKAN configuration file path:</p> <pre><code>export CKAN_INI=$PWD/config/ckan.ini\n</code></pre> <p>The config file must enable the <code>ckanext-charts</code> plugin:</p> <pre><code>ckan.plugins = ... charts_view charts_builder_view ...\n</code></pre> <p>If you're working on the documentation, you can run the following command to start a live-reloading server without gathering the chart types fields data. It will speed up the process significantly, as we won't need to wait for the CKAN initialization:</p> <pre><code>mkdocs serve -a 127.0.0.1:8001\n</code></pre>"},{"location":"#license","title":"License","text":"<p>AGPL</p>"},{"location":"configuration/","title":"Configuration","text":"<p>Configuration options</p> <p>There is a number of configuration options available for the extension. You can set them in the CKAN configuration file or using the admin configuration page.</p>"},{"location":"configuration/#configuration-options","title":"Configuration options","text":""},{"location":"configuration/#cache-strategy","title":"Cache strategy","text":"<p><code>ckanext.charts.cache_strategy</code> [optional]</p> <p>Cache strategy for chart data.</p> <p>Options: <code>redis</code>, <code>file_orc</code>, <code>file_csv</code></p> <p>Type: <code>str</code></p> <p>Default: <code>redis</code></p>"},{"location":"configuration/#redis-cache-ttl","title":"Redis cache TTL","text":"<p><code>ckanext.charts.redis_cache_ttl</code> [optional]</p> <p>Time to live for the Redis cache in seconds. Set to <code>0</code> to disable cache.</p> <p>Type: <code>int</code></p> <p>Default: <code>3600</code></p>"},{"location":"configuration/#file-cache-ttl","title":"File cache TTL","text":"<p><code>ckanext.charts.file_cache_ttl</code> [optional]</p> <p>Time to live for the File cache in seconds. Set to <code>0</code> to disable cache.</p> <p>Type: <code>int</code></p> <p>Default: <code>3600</code></p>"},{"location":"configuration/#enable-cache","title":"Enable cache","text":"<p><code>ckanext.charts.enable_cache</code> [optional]</p> <p>Enable cache for the charts.</p> Warning <p>If the cache is disabled, the chart data will be fetched from the data source every time the chart is rendered. It could lead to performance issues if the data source is slow or the data is too large.</p> <p>Type: <code>bool</code></p> <p>Default: <code>true</code></p>"},{"location":"configuration/#include-htmx","title":"Include HTMX","text":"<p><code>ckanext.charts.include_htmx_asset</code> [optional]</p> <p>Include HTMX assets. Could be disabled if another plugins are including it.</p> <p>Type: <code>bool</code></p> <p>Default: <code>true</code></p>"},{"location":"configuration/#reinit-ckan-js","title":"Reinit CKAN JS","text":"<p><code>ckanext.charts.reinit_ckan_js_modules</code> [optional]</p> <p>Reinit CKAN JS modules after HTMX swap.</p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p>"},{"location":"configuration/#allow-anonymous-users-to-build-charts","title":"Allow anonymous users to build charts","text":"<p><code>ckanext.charts.allow_anon_building_charts</code> [optional]</p> <p>By default, only authenticated users can build charts. If you want to allow anonymous users to build charts, set this option to <code>true</code>.</p> <p>Type: <code>bool</code></p> <p>Default: <code>false</code></p>"},{"location":"configuration/#admin-config-page","title":"Admin config page","text":"<p>The extension provides an admin configuration page where you can set all the listed configuration options. The admin page available only using an extension <code>ckanext-admin-panel</code>. The admin panel is a separate extension that provides an alternative admin interface for CKAN. It allows you to manage CKAN settings and other extensions settings through the web interface.</p> <p></p> <p>This page could be accessed by the following URL: <code>/admin-panel/charts/config</code>, but it will be registered only if the <code>ckanext-admin-panel</code> is installed and enabled.</p>"},{"location":"helpers/","title":"Helper Functions","text":""},{"location":"helpers/#charts.helpers.charts_allow_anon_building_charts","title":"<code>charts_allow_anon_building_charts()</code>","text":"<p>Check if anonymous users are allowed to build charts.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if anonymous users are allowed to build charts, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def charts_allow_anon_building_charts() -&gt; bool:\n    \"\"\"Check if anonymous users are allowed to build charts.\n\n    Returns:\n        bool: True if anonymous users are allowed to build charts, False otherwise.\n    \"\"\"\n    return config.allow_anon_building_charts()\n</code></pre>"},{"location":"helpers/#charts.helpers.charts_get_resource_columns","title":"<code>charts_get_resource_columns(resource_id)</code>","text":"<p>Get the columns of the given resource.</p> PARAMETER DESCRIPTION <code>resource_id</code> <p>Resource ID</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>JSON string of columns options</p> <p> TYPE: <code>str</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def charts_get_resource_columns(resource_id: str) -&gt; str:\n    \"\"\"Get the columns of the given resource.\n\n    Args:\n        resource_id: Resource ID\n\n    Returns:\n        str: JSON string of columns options\n    \"\"\"\n    fetcher = DatastoreDataFetcher(resource_id)\n\n    return json.dumps(\n        [{\"id\": col, \"title\": col} for col in fetcher.fetch_data().columns],\n    )\n</code></pre>"},{"location":"helpers/#charts.helpers.charts_include_htmx_asset","title":"<code>charts_include_htmx_asset()</code>","text":"<p>Checks if the HTMX asset should be included.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the HTMX asset should be included, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def charts_include_htmx_asset() -&gt; bool:\n    \"\"\"Checks if the HTMX asset should be included.\n\n    Returns:\n        bool: True if the HTMX asset should be included, False otherwise.\n    \"\"\"\n    return config.include_htmx_asset()\n</code></pre>"},{"location":"helpers/#charts.helpers.charts_reinit_ckan_js_modules","title":"<code>charts_reinit_ckan_js_modules()</code>","text":"<p>Checks if CKAN JS modules should be reinitialized.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if CKAN JS modules should be reinitialized, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def charts_reinit_ckan_js_modules() -&gt; bool:\n    \"\"\"Checks if CKAN JS modules should be reinitialized.\n\n    Returns:\n        bool: True if CKAN JS modules should be reinitialized, False otherwise.\n    \"\"\"\n    return config.reinit_ckan_js_modules()\n</code></pre>"},{"location":"helpers/#charts.helpers.charts_user_is_authenticated","title":"<code>charts_user_is_authenticated()</code>","text":"<p>Check if the user is authenticated.</p> RETURNS DESCRIPTION <code>bool</code> <p>True if the user is authenticated, False otherwise.</p> <p> TYPE: <code>bool</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def charts_user_is_authenticated() -&gt; bool:\n    \"\"\"Check if the user is authenticated.\n\n    Returns:\n        bool: True if the user is authenticated, False otherwise.\n    \"\"\"\n    return tk.current_user.is_authenticated\n</code></pre>"},{"location":"helpers/#charts.helpers.get_available_chart_engines_options","title":"<code>get_available_chart_engines_options()</code>","text":"<p>Get the available chart engines.</p> RETURNS DESCRIPTION <code>list[dict[str, str]]</code> <p>List of chart engines options</p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def get_available_chart_engines_options() -&gt; list[dict[str, str]]:\n    \"\"\"Get the available chart engines.\n\n    Returns:\n        List of chart engines options\n    \"\"\"\n    return [{\"value\": engine, \"text\": engine} for engine in get_chart_engines()]\n</code></pre>"},{"location":"helpers/#charts.helpers.get_file_cache_size","title":"<code>get_file_cache_size()</code>","text":"<p>Get the size of the file cache in a human-readable format.</p> RETURNS DESCRIPTION <code>str</code> <p>Human-readable file cache size</p> <p> TYPE: <code>str</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def get_file_cache_size() -&gt; str:\n    \"\"\"Get the size of the file cache in a human-readable format.\n\n    Returns:\n        str: Human-readable file cache size\n    \"\"\"\n    return utils.printable_file_size(count_file_cache_size())\n</code></pre>"},{"location":"helpers/#charts.helpers.get_redis_cache_size","title":"<code>get_redis_cache_size()</code>","text":"<p>Get the size of the Redis cache in a human-readable format.</p> RETURNS DESCRIPTION <code>str</code> <p>Human-readable Redis cache size</p> <p> TYPE: <code>str</code> </p> Source code in <code>ckanext/charts/helpers.py</code> <pre><code>def get_redis_cache_size() -&gt; str:\n    \"\"\"Get the size of the Redis cache in a human-readable format.\n\n    Returns:\n        str: Human-readable Redis cache size\n    \"\"\"\n    return utils.printable_file_size(count_redis_cache_size())\n</code></pre>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#requirements","title":"Requirements","text":"<p>Requires Redis 7+</p> <p>Compatibility with core CKAN versions:</p> CKAN version Compatible? 2.9 and earlier no 2.10+ yes"},{"location":"install/#installation_1","title":"Installation","text":"<ol> <li> <p>Install the extension from <code>PyPI</code>:     <pre><code>pip install ckanext-charts\n</code></pre></p> <p>If you want to use <code>ORC</code> file cache, you have to install the extension with the <code>pyarrow</code> extra: <pre><code>pip install ckanext-charts[pyarrow]\n</code></pre></p> </li> <li> <p>Enable the view and builder plugins in your CKAN configuration file (e.g. <code>ckan.ini</code> or <code>production.ini</code>):</p> <pre><code>ckan.plugins = ... charts_view charts_builder_view ...\n</code></pre> </li> </ol>"},{"location":"install/#dependencies","title":"Dependencies","text":"<p>The extension requires the following CKAN extensions to be installed and enabled:</p> <ol> <li> <p>ckanext-scheming: We're using the scheming extension to create custom forms for the chart builders.</p> </li> <li> <p>ckanext-admin-panel (optional): If you want to use the admin configuration page, you need to install and enable this extension. The admin panel is a separate extension that provides an alternative admin interface for CKAN. It allows you to manage CKAN settings and other extensions settings through the web interface and significantly extends the default CKAN admin interface.</p> </li> </ol>"},{"location":"troubleshooting/","title":"Troubleshooting","text":"<p>ImportError: lxml.html.clean module is now a separate project lxml_html_clean</p> <p>Install <code>lxml[html_clean]</code> or <code>lxml_html_clean</code> directly using pip.</p>"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#basic-usage","title":"Basic usage","text":"<p>This extension offers two plugins: <code>charts_view</code> and <code>charts_builder_view</code>. The first plugin is a standard chart builder designed for system administrators or anyone with permission to edit or create a resource view. Creating a preview using this plugin generates a static chart with saved settings. This chart retains the settings and will always be rendered in the same way.</p> <p></p> <p>The <code>charts_builder_view</code> plugin does not have any special settings during the creation or editing stages. Instead, it renders a chart builder JS widget on a resource page, allowing any user to interact with the resource data and create a chart that meets their needs. In the future, we plan to implement a feature that will allow users to save their charts.</p> <p></p>"},{"location":"usage/#restrict-user-chart-builder-for-anonymous-users","title":"Restrict user chart builder for anonymous users","text":"<p>The user chart builder could be restricted to only authenticated users. See the config settings section for more information. In this case, user will be forced to log in to build a chart. After the user logs in, user will be redirected to the chart builder page back.</p> <p></p>"},{"location":"utils/","title":"Utility Functions","text":""},{"location":"utils/#charts.utils.build_chart_for_data","title":"<code>build_chart_for_data(settings, data)</code>","text":"<p>Build chart for the given dataframe and settings.</p> PARAMETER DESCRIPTION <code>settings</code> <p>Chart settings</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>data</code> <p>Dataframe with data</p> <p> TYPE: <code>DataFrame</code> </p> RETURNS DESCRIPTION <code>str | None</code> <p>Chart config as JSON string</p> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def build_chart_for_data(settings: dict[str, Any], data: pd.DataFrame) -&gt; str | None:\n    \"\"\"Build chart for the given dataframe and settings.\n\n    Args:\n        settings: Chart settings\n        data: Dataframe with data\n\n    Returns:\n        Chart config as JSON string\n    \"\"\"\n\n    builder = get_chart_form_builder(settings[\"engine\"], settings[\"type\"])(\n        dataframe=data,\n    )\n\n    settings, _ = tk.navl_validate(settings, builder.get_validation_schema(), {})\n\n    return _build_chart(settings, data)\n</code></pre>"},{"location":"utils/#charts.utils.build_chart_for_resource","title":"<code>build_chart_for_resource(settings, resource_id)</code>","text":"<p>Build chart for the given resource ID.</p> <p>Uses a DatastoreDataFetcher to fetch data from the resource.</p> PARAMETER DESCRIPTION <code>settings</code> <p>Chart settings</p> <p> TYPE: <code>dict[str, Any]</code> </p> <code>resource_id</code> <p>Resource ID</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str | None</code> <p>str | None: Chart config as JSON string or None if the chart can't be built</p> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def build_chart_for_resource(settings: dict[str, Any], resource_id: str) -&gt; str | None:\n    \"\"\"Build chart for the given resource ID.\n\n    Uses a DatastoreDataFetcher to fetch data from the resource.\n\n    Args:\n        settings: Chart settings\n        resource_id: Resource ID\n\n    Returns:\n        str | None: Chart config as JSON string or None if the chart can't be built\n    \"\"\"\n    settings.pop(\"__extras\", None)\n\n    try:\n        df = DatastoreDataFetcher(resource_id).fetch_data()\n    except tk.ValidationError:\n        return None\n\n    return _build_chart(settings, df)\n</code></pre>"},{"location":"utils/#charts.utils.can_view","title":"<code>can_view(data_dict)</code>","text":"<p>Check if the resource can be viewed as a chart.</p> <p>For now, we work only with resources stored with the DataStore.</p> PARAMETER DESCRIPTION <code>data_dict</code> <p>Resource data dictionary</p> <p> TYPE: <code>dict[str, Any]</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if the resource can be viewed as a chart, False otherwise</p> <p> TYPE: <code>bool</code> </p> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def can_view(data_dict: dict[str, Any]) -&gt; bool:\n    \"\"\"Check if the resource can be viewed as a chart.\n\n    For now, we work only with resources stored with the DataStore.\n\n    Args:\n        data_dict: Resource data dictionary\n\n    Returns:\n        bool: True if the resource can be viewed as a chart, False otherwise\n    \"\"\"\n    # TODO: Add support for XML, XLS, XLSX, and other formats tabular data?\n    # if data_dict[\"resource\"][\"format\"].lower() == \"xml\":\n    #     return True\n\n    return data_dict[\"resource\"].get(\"datastore_active\")\n</code></pre>"},{"location":"utils/#charts.utils.get_chart_form_builder","title":"<code>get_chart_form_builder(engine, chart_type)</code>","text":"<p>Get form builder for the given engine and chart type.</p> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def get_chart_form_builder(engine: str, chart_type: str):\n    \"\"\"Get form builder for the given engine and chart type.\"\"\"\n    builders = get_chart_engines()\n\n    if engine not in builders:\n        raise NotImplementedError(f\"Engine {engine} is not supported\")\n\n    return builders[engine].get_form_for_type(chart_type)\n</code></pre>"},{"location":"utils/#charts.utils.get_column_options","title":"<code>get_column_options(resource_id)</code>","text":"<p>Get column options for the given resource.</p> PARAMETER DESCRIPTION <code>resource_id</code> <p>Resource ID</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>list[dict[str, str]]</code> <p>List of column options</p> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def get_column_options(resource_id: str) -&gt; list[dict[str, str]]:\n    \"\"\"Get column options for the given resource.\n\n    Args:\n        resource_id: Resource ID\n\n    Returns:\n        List of column options\n    \"\"\"\n    df = DatastoreDataFetcher(resource_id).fetch_data()\n\n    return [{\"text\": col, \"value\": col} for col in df.columns]\n</code></pre>"},{"location":"utils/#charts.utils.printable_file_size","title":"<code>printable_file_size(size_bytes)</code>","text":"<p>Convert file size in bytes to human-readable format.</p> PARAMETER DESCRIPTION <code>size_bytes</code> <p>File size in bytes</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>str</code> <p>Human-readable file size</p> <p> TYPE: <code>str</code> </p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; printable_file_size(123456789)\n'117.7 MB'\n</code></pre> <pre><code>&gt;&gt;&gt; printable_file_size(7777)\n'7.6 KB'\n</code></pre> Source code in <code>ckanext/charts/utils.py</code> <pre><code>def printable_file_size(size_bytes: int) -&gt; str:\n    \"\"\"Convert file size in bytes to human-readable format.\n\n    Args:\n        size_bytes: File size in bytes\n\n    Returns:\n        str: Human-readable file size\n\n    Examples:\n        &gt;&gt;&gt; printable_file_size(123456789)\n        '117.7 MB'\n\n        &gt;&gt;&gt; printable_file_size(7777)\n        '7.6 KB'\n    \"\"\"\n    if size_bytes == 0:\n        return \"0 bytes\"\n\n    size_name = (\"bytes\", \"KB\", \"MB\", \"GB\", \"TB\")\n    i = int(math.floor(math.log(size_bytes, 1024)))\n    p = math.pow(1024, i)\n    s = round(float(size_bytes) / p, 1)\n\n    return f\"{s} {size_name[i]}\"\n</code></pre>"},{"location":"validators/","title":"Validators","text":""},{"location":"validators/#charts.logic.validators.chart_checkbox","title":"<code>chart_checkbox(value)</code>","text":"<p>A validator for checkbox.</p> <p>In a checkbox form snippet we have two inputs, one hidden and one checkbox. The hidden input always sends a value of \"off\" and the checkbox sends \"on\"</p> <p>We need it to properly set a default <code>True</code> value for the field.</p> PARAMETER DESCRIPTION <code>value</code> <p>The checkbox(s) value(s)</p> <p> TYPE: <code>str | list[str]</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>The value as a boolean</p> <p> TYPE: <code>str</code> </p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def chart_checkbox(value: str | list[str]) -&gt; str:\n    \"\"\"A validator for checkbox.\n\n    In a checkbox form snippet we have two inputs, one hidden and one checkbox.\n    The hidden input always sends a value of \"off\" and the checkbox sends \"on\"\n\n    We need it to properly set a default `True` value for the field.\n\n    Args:\n        value (str | list[str]): The checkbox(s) value(s)\n\n    Returns:\n        bool: The value as a boolean\n    \"\"\"\n    if isinstance(value, list):\n        return value[-1]\n\n    return value\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_if_empty_same_as","title":"<code>charts_if_empty_same_as(other_key)</code>","text":"<p>A custom version of if_empty_same_as validator for charts.</p> <p>This validator is used to set the value of a field to the value of another field if it is empty or missing.</p> PARAMETER DESCRIPTION <code>other_key</code> <p>The key of the field to copy the value from</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>Callable[..., Any]</code> <p>Callable[..., Any]: The validator function</p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_if_empty_same_as(other_key: str) -&gt; Callable[..., Any]:\n    \"\"\"A custom version of if_empty_same_as validator for charts.\n\n    This validator is used to set the value of a field to the value of another\n    field if it is empty or missing.\n\n    Args:\n        other_key (str): The key of the field to copy the value from\n\n    Returns:\n        Callable[..., Any]: The validator function\n    \"\"\"\n\n    def callable(key, data, errors, context):\n        value = data.get(key)\n        if not value or value is tk.missing:\n            try:\n                data[key] = data[key[:-1] + (other_key,)]\n            except KeyError:\n                data[key] = data.get((\"__extras\",), {}).get(other_key, \"\")\n\n    return callable\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_list_length_validator","title":"<code>charts_list_length_validator(max_length)</code>","text":"<p>A validator to check the length of a list.</p> PARAMETER DESCRIPTION <code>max_length</code> <p>The maximum length of the list</p> <p> TYPE: <code>int</code> </p> RETURNS DESCRIPTION <code>Callable[..., Any]</code> <p>Callable[..., Any]: The validator function</p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_list_length_validator(max_length: int) -&gt; Callable[..., Any]:\n    \"\"\"A validator to check the length of a list.\n\n    Args:\n        max_length (int): The maximum length of the list\n\n    Returns:\n        Callable[..., Any]: The validator function\n    \"\"\"\n    def callable(\n        key: types.FlattenKey,\n        data: types.FlattenDataDict,\n        errors: types.FlattenErrorDict,\n        context: types.Context,\n    ):\n        if len(data[key]) &gt; max_length:\n            raise tk.Invalid(tk._(\"Length must be less than {0}\").format(max_length))\n\n    return callable\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_list_to_csv","title":"<code>charts_list_to_csv(data)</code>","text":"<p>Convert a list of strings to a CSV string.</p> PARAMETER DESCRIPTION <code>data</code> <p>The data to convert</p> <p> TYPE: <code>list[str] | str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The comma separated string</p> <p> TYPE: <code>str</code> </p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_list_to_csv(data: list[str] | str) -&gt; str:\n    \"\"\"Convert a list of strings to a CSV string.\n\n    Args:\n        data (list[str] | str): The data to convert\n\n    Returns:\n        str: The comma separated string\n    \"\"\"\n    if not isinstance(data, list):\n        return data\n\n    return \", \".join(data)\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_strategy_support","title":"<code>charts_strategy_support(strategy)</code>","text":"<p>Check if the cache strategy is supported.</p> PARAMETER DESCRIPTION <code>strategy</code> <p>The cache strategy</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The cache strategy if it is supported</p> <p> TYPE: <code>str</code> </p> RAISES DESCRIPTION <code>Invalid</code> <p>If the cache strategy is not supported</p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_strategy_support(strategy: str) -&gt; str:\n    \"\"\"Check if the cache strategy is supported.\n\n    Args:\n        strategy (str): The cache strategy\n\n    Returns:\n        str: The cache strategy if it is supported\n\n    Raises:\n        tk.Invalid: If the cache strategy is not supported\n    \"\"\"\n    if strategy not in const.SUPPORTED_CACHE_STRATEGIES:\n        raise tk.Invalid(tk._(\"Invalid cache strategy\"))\n\n    if strategy == const.CACHE_FILE_ORC:\n        try:\n            from pyarrow import orc as _  # noqa\n        except ImportError:\n            raise tk.Invalid(\n                tk._(\"Can't use File Orc cache strategy. PyArrow is not installed\"),\n            ) from None\n\n    if not strategy:\n        return const.DEFAULT_CACHE_STRATEGY\n\n    return strategy\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_to_list_if_string","title":"<code>charts_to_list_if_string(value)</code>","text":"<p>Convert a string to a list.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to convert</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>Any</code> <p>list[Any]: The value in a list</p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_to_list_if_string(value: Any) -&gt; Any:\n    \"\"\"Convert a string to a list.\n\n    Args:\n        value (Any): The value to convert\n\n    Returns:\n        list[Any]: The value in a list\n    \"\"\"\n    if isinstance(value, str):\n        return [value]\n\n    return value\n</code></pre>"},{"location":"validators/#charts.logic.validators.charts_validate_extras","title":"<code>charts_validate_extras(key, data, errors, context)</code>","text":"<p>Validate charts settings according to the chart type and engine schema.</p> PARAMETER DESCRIPTION <code>key</code> <p>The key of the field</p> <p> TYPE: <code>FlattenKey</code> </p> <code>data</code> <p>The data to validate</p> <p> TYPE: <code>FlattenDataDict</code> </p> <code>errors</code> <p>The errors dict</p> <p> TYPE: <code>FlattenErrorDict</code> </p> <code>context</code> <p>The context</p> <p> TYPE: <code>Context</code> </p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def charts_validate_extras(\n    key: types.FlattenKey,\n    data: types.FlattenDataDict,\n    errors: types.FlattenErrorDict,\n    context: types.Context,\n):\n    \"\"\"Validate charts settings according to the chart type and engine schema.\n\n    Args:\n        key (types.FlattenKey): The key of the field\n        data (types.FlattenDataDict): The data to validate\n        errors (types.FlattenErrorDict): The errors dict\n        context (types.Context): The context\n    \"\"\"\n    settings = _extract_setting(data)\n\n    if \"engine\" not in settings or \"type\" not in settings:\n        builder = DEFAULT_CHART_FORM\n    else:\n        builder = utils.get_chart_form_builder(settings[\"engine\"], settings[\"type\"])\n\n    settings, err = tk.navl_validate(\n        settings,\n        builder(settings[\"resource_id\"]).get_validation_schema(\n            context.get(\"_for_show\", False),\n        ),\n        {},\n    )\n\n    # TODO: do we have a better way to handle this? Seems like a hack\n    for k, v in settings.items():\n        data[(k,)] = v\n\n    for k, v in settings.pop(\"__extras\", {}).items():\n        data[(k,)] = v\n\n    for k, v in err.items():\n        errors[(k,)] = v\n</code></pre>"},{"location":"validators/#charts.logic.validators.float_validator","title":"<code>float_validator(value)</code>","text":"<p>A validator for decimal numbers.</p> PARAMETER DESCRIPTION <code>value</code> <p>The value to validate</p> <p> TYPE: <code>Any</code> </p> RETURNS DESCRIPTION <code>float</code> <p>The value as a float</p> <p> TYPE: <code>float</code> </p> Source code in <code>ckanext/charts/logic/validators.py</code> <pre><code>def float_validator(value: Any) -&gt; float:\n    \"\"\"A validator for decimal numbers.\n\n    Args:\n        value (Any): The value to validate\n\n    Returns:\n        float: The value as a float\n    \"\"\"\n    try:\n        return float(value)\n    except ValueError:\n        raise tk.Invalid(tk._(\"Must be a decimal number\")) from None\n</code></pre>"},{"location":"caching/","title":"Caching","text":"<p>The extension implement a cache strategy to store the data fetched from the different sources.</p> <p>There are three cache strategies available:</p> <ol> <li><code>redis</code></li> <li><code>file_orc</code></li> <li><code>file_csv</code>.</li> </ol>"},{"location":"caching/#file-cache","title":"File cache","text":"<p>The file cache works by storing the data in an <code>orc</code> or <code>csv</code> file in the filesystem. The redis cache stores the data in a Redis database. The cache strategy can be changed at the CKAN configuration level through the admin interface or in a configuration file.</p> <p>The <code>file-type</code> cache strategy stores the data in a file in the filesystem. The file cache is stored in the <code>ckanext-charts</code> directory in the CKAN storage path. The file cache is stored in an <code>orc</code> or <code>csv</code> file format.</p> Warning <p>Using <code>file_orc</code> cache strategy requires the <code>pyarrow</code> python library to be installed.</p>"},{"location":"caching/#redis-cache","title":"Redis cache","text":"<p>The <code>redis</code> cache strategy stores the data in a Redis database.</p> <p>Each redis key has a <code>ckanext-charts:*</code> prefix and store the data as a CSV string.</p> Note <p>You need to have a Redis server running to use the <code>redis</code> cache strategy.</p>"},{"location":"caching/#cache-ttl","title":"Cache TTL","text":"<p>The cache TTL can be set in the CKAN configuration file. The default value is 3600 seconds (1 hour). The cache TTL can be set to <code>0</code> to disable the cache.</p> <p>The <code>redis</code> and <code>file-type</code> cache has separate TTL settings:</p> <ul> <li>The <code>redis</code> cache TTL can be set with the <code>ckanext.charts.redis_cache_ttl</code> configuration option.</li> <li>The <code>file</code> cache TTL can be set with the <code>ckanext.charts.file_cache_ttl</code> configuration option.</li> </ul>"},{"location":"caching/#disable-cache","title":"Disable cache","text":"<p>Cache could be disabled by setting <code>ckanext.charts.enable_cache</code> to <code>false</code>. In this case the data will be fetched from the source every time the chart is rendered. It could be useful for debugging purposes. But using it in production is not recommended, as it could lead to performance issues.</p>"},{"location":"caching/base/","title":"Base Cache Strategy","text":"<p>To implement a custom cache strategy, you need to create a new class that extends the <code>CacheStrategy</code> class and implement the abstract methods.</p> <p>See a naive implementation of a memcached cache strategy below: <pre><code>from io import BytesIO\n\nfrom pymemcache.client import base\nimport pandas as pd\n\nimport ckanext.charts.config as config\nfrom ckanext.charts.cache import CacheStrategy\n\nclass MemcachedCache(CacheStrategy):\n    \"\"\"Cache data to Memcached\"\"\"\n\n    def __init__(self):\n        self.client = base.Client(('localhost', 11211))\n\n    def get_data(self, key: str) -&gt; pd.DataFrame | None:\n        \"\"\"Return data from cache if exists\"\"\"\n        try:\n            raw_data = self.client.get(key)\n\n            if not raw_data:\n                return None\n\n            return pd.read_csv(BytesIO(raw_data))\n        except Exception:\n            log.exception(f\"Failed to get data for key: {key}\")\n            return None\n\n    def set_data(self, key: str, data: pd.DataFrame):\n        \"\"\"Serialize data and save to Memcached\"\"\"\n        cache_ttl = config.get_memcached_cache_ttl()\n\n        try:\n            serialized_data = data.to_csv(index=False).encode('utf-8')\n            self.client.set(key, serialized_data, expire=cache_ttl)\n        except Exception:\n            log.exception(f\"Failed to save data to Memcached for key: {key}\")\n\n    def invalidate(self, key: str):\n        \"\"\"Invalidate cache by key\"\"\"\n        try:\n            self.client.delete(key)\n        except Exception:\n            log.exception(f\"Failed to invalidate cache for key: {key}\")\n</code></pre></p> <p>               Bases: <code>ABC</code></p> <p>Cache strategy interface.</p> <p>Defines the abstracts methods for cache strategies.</p>"},{"location":"caching/base/#charts.cache.CacheStrategy.get_data","title":"<code>get_data(key)</code>  <code>abstractmethod</code>","text":"<p>Return data from cache if exists.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache  key to retrieve the data.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/base/#charts.cache.CacheStrategy.invalidate","title":"<code>invalidate(key)</code>  <code>abstractmethod</code>","text":"<p>Invalidate cache by key.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to invalidate.</p> <p> TYPE: <code>str</code> </p>"},{"location":"caching/base/#charts.cache.CacheStrategy.set_data","title":"<code>set_data(key, data)</code>  <code>abstractmethod</code>","text":"<p>Store data to cache.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to store the data.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p>"},{"location":"caching/file/","title":"File Cache","text":""},{"location":"caching/file/#charts.cache.FileCache","title":"<code>FileCache</code>","text":"<p>               Bases: <code>CacheStrategy</code></p> <p>Cache data as file.</p> <p>We store the cached files in a separate folder in the CKAN storage.</p>"},{"location":"caching/file/#charts.cache.FileCache.generate_unique_consistent_filename","title":"<code>generate_unique_consistent_filename(key)</code>","text":"<p>Generate unique and consistent filename based on the key.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to generate the filename.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The filename.</p>"},{"location":"caching/file/#charts.cache.FileCache.get_data","title":"<code>get_data(key)</code>","text":"<p>Return data from cache if exists.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to retrieve the data.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/file/#charts.cache.FileCache.invalidate","title":"<code>invalidate(key)</code>","text":"<p>Remove data from cache.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to invalidate.</p> <p> TYPE: <code>str</code> </p>"},{"location":"caching/file/#charts.cache.FileCache.is_file_cache_expired","title":"<code>is_file_cache_expired(file_path)</code>  <code>staticmethod</code>","text":"<p>Check if file cache is expired.</p> <p>If TTL is 0 then cache never expires.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>The path to the file.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>bool</code> <p>True if file cache is expired, otherwise False.</p>"},{"location":"caching/file/#charts.cache.FileCache.make_file_path_from_key","title":"<code>make_file_path_from_key(key)</code>","text":"<p>Generate file path based on the key</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to generate the file path.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>str</code> <p>The file path.</p>"},{"location":"caching/file/#charts.cache.FileCache.read_data","title":"<code>read_data(file)</code>  <code>abstractmethod</code>","text":"<p>Read cached data from a file object.</p> PARAMETER DESCRIPTION <code>file</code> <p>The file object to read the data.</p> <p> TYPE: <code>IO</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/file/#charts.cache.FileCache.set_data","title":"<code>set_data(key, data)</code>","text":"<p>Store data to cache.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to store the data.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p>"},{"location":"caching/file/#charts.cache.FileCache.write_data","title":"<code>write_data(file_path, data)</code>  <code>abstractmethod</code>","text":"<p>Defines how to write data to a file.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>The path to the file.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p>"},{"location":"caching/file/#charts.cache.FileCacheORC","title":"<code>FileCacheORC</code>","text":"<p>               Bases: <code>FileCache</code></p> <p>Cache data as ORC file</p>"},{"location":"caching/file/#charts.cache.FileCacheORC.read_data","title":"<code>read_data(file)</code>","text":"<p>Read cached data from an ORC file.</p> PARAMETER DESCRIPTION <code>file</code> <p>The file object to read the data.</p> <p> TYPE: <code>IO</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/file/#charts.cache.FileCacheORC.write_data","title":"<code>write_data(file_path, data)</code>","text":"<p>Write data to an ORC file.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>The path to the file.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p>"},{"location":"caching/file/#charts.cache.FileCacheCSV","title":"<code>FileCacheCSV</code>","text":"<p>               Bases: <code>FileCache</code></p> <p>Cache data as CSV file</p>"},{"location":"caching/file/#charts.cache.FileCacheCSV.read_data","title":"<code>read_data(file)</code>","text":"<p>Read cached data from a CSV file.</p> PARAMETER DESCRIPTION <code>file</code> <p>The file object to read the data.</p> <p> TYPE: <code>IO</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/file/#charts.cache.FileCacheCSV.write_data","title":"<code>write_data(file_path, data)</code>","text":"<p>Write data to a CSV file.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>The path to the file.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p>"},{"location":"caching/redis/","title":"Redis Cache","text":"<p>               Bases: <code>CacheStrategy</code></p> <p>Cache data to Redis as a CSV string</p>"},{"location":"caching/redis/#charts.cache.RedisCache.get_data","title":"<code>get_data(key)</code>","text":"<p>Return data from cache if exists.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to retrieve the data.</p> <p> TYPE: <code>str</code> </p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>The data if exists, otherwise None.</p>"},{"location":"caching/redis/#charts.cache.RedisCache.invalidate","title":"<code>invalidate(key)</code>","text":"<p>Remove data from cache.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to invalidate.</p> <p> TYPE: <code>str</code> </p>"},{"location":"caching/redis/#charts.cache.RedisCache.set_data","title":"<code>set_data(key, data)</code>","text":"<p>Serialize data and save to Redis.</p> PARAMETER DESCRIPTION <code>key</code> <p>The cache key to store the data.</p> <p> TYPE: <code>str</code> </p> <code>data</code> <p>The data to be stored.</p> <p> TYPE: <code>DataFrame</code> </p> RAISES DESCRIPTION <code>Exception</code> <p>If failed to save data to Redis.</p>"},{"location":"engines/","title":"Index","text":"<p>The <code>ckanext-charts</code> implements supports different chart engines, such as <code>plotly</code>, <code>observable</code> and <code>chartjs</code>.</p> <p>Each engine consists of two classes - chart builder and form builder. The chart builder is responsible for generating a JSON-string representation of the chart data, that will be passed to a respective JS module, that will render a chart based on the data.</p> <p>The form builder is responsible for generating a form that allows users to configure the chart from the UI.</p> <p>Also, you can implement support of a chart library of your choice by creating a custom chart engine. Read more about it  here.</p>"},{"location":"engines/custom/","title":"Custom chart engine","text":""},{"location":"engines/custom/#implementing-new-chart-engines-support","title":"Implementing new chart engines support","text":"<p>Implementing support for a new chart engine includes multiple steps and changes in Python, HTML, and JavaScript. Starting from the Python code:</p> <ol> <li> <p>Create a new builder class at <code>ckanext.charts.chart_builder</code> that inherits from <code>BaseChartBuilder</code> and implements the <code>get_supported_forms</code> method. This method must return a list of classes that represent supported chart types forms.</p> </li> <li> <p>Each form type builder must be connected with a respective chart type builder.</p> </li> <li> <p>The chart type builder must implement a <code>to_json</code> method that will return a dumped JSON data, which will be passed to a JS script.</p> </li> <li> <p>The form type builder must implement a <code>get_form_fields</code> method that will return a list of all form fields that will be rendered for the user, allowing them to provide all the necessary information for a chart.</p> </li> <li> <p>Register your chart engine by adding the builder class to <code>get_chart_engines</code> in <code>ckanext.charts.chart_builder.__init__.py</code>.</p> </li> </ol> <p>A full example of an implementation of <code>bar</code> chart for <code>obvervable plot</code> library.</p> <pre><code>from __future__ import annotations\n\nimport json\nfrom typing import Any\n\nimport ckanext.charts.exception as exception\nfrom ckanext.charts.chart_builders.base import BaseChartBuilder, BaseChartForm\n\n\nclass ObservableBuilder(BaseChartBuilder):\n    @classmethod\n    def get_supported_forms(cls) -&gt; list[type[Any]]:\n        return [ObservableBarForm]\n\n\nclass ObservableBarBuilder(ObservableBuilder):\n    def to_json(self) -&gt; str:\n        return json.dumps(\n            {\n                \"type\": \"bar\",\n                \"data\": self.df.to_dict(orient=\"records\"),\n                \"settings\": self.settings,\n            }\n        )\n\n\nclass ObservableBarForm(BaseChartForm):\n    name = \"Bar\"\n    builder = ObservableBarBuilder\n\n    def fill_field(self, choices: list[dict[str, str]]) -&gt; dict[str, str]:\n        field = self.color_field(choices)\n        field.update({\"field_name\": \"fill\", \"label\": \"Fill\"})\n\n        return field\n\n    def get_form_fields(self):\n        columns = [{\"value\": col, \"label\": col} for col in self.df.columns]\n        chart_types = [\n            {\"value\": form.name, \"label\": form.name}\n            for form in self.builder.get_supported_forms()\n        ]\n\n        return [\n            self.title_field(),\n            self.description_field(),\n            self.engine_field(),\n            self.type_field(chart_types),\n            self.x_axis_field(columns),\n            self.y_axis_field(columns),\n            self.fill_field(columns),\n            self.opacity_field(),\n            self.limit_field(),\n        ]\n</code></pre>"},{"location":"engines/custom/#vendor-and-custom-js","title":"Vendor and custom JS","text":"<p>Another step is to register JS/CSS vendor libraries of the chart you want to use. Refer to CKAN documentation to read about adding CSS and JavaScript files using Webassets.</p> <p>You also will need a CKAN JS module, that will be responsible for rendering the Chart. This module will work with the vendor library and will be responsible for rendering the chart in the container.</p> <p>This module must be registered inside a <code>webassets.yml</code> as well. <pre><code>    ckan.module(\"charts-render-observable\", function ($, _) {\n        \"use strict\";\n\n        return {\n            options: {\n                config: null\n            },\n\n            initialize: function () {\n                $.proxyAll(this, /_/);\n\n                if (!this.options.config) {\n                    console.error(\"No configuration provided\");\n                    return;\n                }\n\n                var plot;\n\n                switch (this.options.config.type) {\n                    case \"bar\":\n                        plot = Plot.barY(this.options.config.data, this.options.config.settings).plot();\n                        break;\n                    default:\n                        return;\n                }\n\n                this.el[0].replaceChildren(plot);\n            }\n        };\n    });\n</code></pre></p>"},{"location":"engines/custom/#html-container","title":"HTML container","text":"<p>And an HTML file, that will provide a proper container and include your JS module with <code>data-module</code>.</p> <pre><code>    {% asset \"charts/observable\" %}\n\n    {% if chart %}\n        &lt;div id=\"chart-container\" data-module=\"charts-render-observable\" data-module-config=\"{{ chart }}\"&gt;&lt;/div&gt;\n    {% else %}\n        &lt;p class=\"text-muted\"&gt;\n            {{ _(\"Cannot build chart with current settings\") }}\n        &lt;/p&gt;\n    {% endif %}\n</code></pre> <p>Note, that we should add <code>{% asset \"charts/observable\" %}</code> not only here, but in <code>charts_form.html</code> too.</p> <p>The reason for having a separate <code>HTML</code> file and <code>JS</code> module is that different libraries may require different types of container elements (such as div, canvas, etc.) to initialize or may need additional boilerplate code to build a chart. There's no easy way to abstract this, so you have to implement these things yourself.</p>"},{"location":"engines/chartjs/","title":"Chart.js chart engine","text":"<p>The <code>Chart.JS</code> chart engine supports the following chart types:</p> <ul> <li>Bar chart</li> <li>Horizontal bar chart</li> <li>Line chart</li> <li>Pie chart</li> <li>Doughnut chart</li> <li>Scatter plot</li> <li>Bubble chart</li> <li>Radar chart</li> </ul>"},{"location":"engines/chartjs/#chart-control","title":"Chart control","text":"<p>The chart engine provides the following chart control options:</p> <ul> <li>Reset the chart to its initial state</li> <li>Toggle Zoom mode</li> <li>Toggle Pan mode</li> <li>Take a screenshot of the chart to download as a PNG image</li> </ul>"},{"location":"engines/chartjs/bar/","title":"Bar chart","text":"<p>The bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. For a horizontal bar chart, use the <code>Horizontal bar chart</code> chart type.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select one or more columns for the Y-axis</p> <p>Type: <code>List[str]</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/chartjs/bubble/","title":"Bubble chart","text":"<p>The bubble chart is a chart that displays data points as bubbles. The size of the bubble represents a third dimension of the data.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Size             (<code>size</code>)                               [Required] <p>Select a column for the size</p> <p>Type: <code>str</code></p>"},{"location":"engines/chartjs/doughnut/","title":"Doughnut chart","text":"<p>The doughnut chart is a variant of the pie chart, with a hole in the center. It is useful for showing the relationship of parts to a whole.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              Values             (<code>values</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Names             (<code>names</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>"},{"location":"engines/chartjs/hbar/","title":"Horizontal Bar chart","text":"<p>The horizontal bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars are plotted horizontally.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select one or more columns for the Y-axis</p> <p>Type: <code>List[str]</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/chartjs/line/","title":"Line chart","text":"<p>The line chart is a chart that displays information as a series of data points called 'markers' connected by straight line segments. It is useful for showing trends over time.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select one or more columns for the Y-axis</p> <p>Type: <code>List[str]</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Invert X-axis             (<code>invert_x</code>)                        <p>Invert the X-axis</p> <p>Type: <code>bool</code></p>              Invert Y-axis             (<code>invert_y</code>)                        <p>Invert the Y-axis</p> <p>Type: <code>bool</code></p>              Split by years             (<code>split_data</code>)                        <p>Split data into different columns by years based on datetime column stated for the x-axis</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Break the chart             (<code>break_chart</code>)                        <p>Break the graph at missing values</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Chart Y axe right label             (<code>y_axis_label_right</code>)                        <p>Label for the Y-axis on the right side</p> <p>Type: <code>str</code></p>"},{"location":"engines/chartjs/pie/","title":"Pie chart","text":"<p>The pie chart is a circular statistical graphic that is divided into slices to illustrate numerical proportions. The arc length of each slice is proportional to the quantity it represents.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              Values             (<code>values</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Names             (<code>names</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>"},{"location":"engines/chartjs/radar/","title":"Radar chart","text":"<p>The radar chart is a chart that displays multivariate data in the form of a two-dimensional chart of three or more quantitative variables represented on axes starting from the same point. The data points are connected by a line to form a polygon.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              Names             (<code>names</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Values             (<code>values</code>)                               [Required] <p>Select 3 or more different categorical variables (dimensions)</p> <p>Type: <code>List[str]</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>"},{"location":"engines/chartjs/scatter/","title":"Scatter Plot","text":"<p>The scatter plot is a chart that uses Cartesian coordinates to display values for two variables for a set of data. The data points are represented as individual dots.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Doughnut</code>,                                       <code>Scatter</code>,                                       <code>Bubble</code>,                                       <code>Radar</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>"},{"location":"engines/observable/","title":"Index","text":"<p>The <code>Observable Plot</code> chart engine supports the following chart types:</p> <ul> <li>Bar chart</li> <li>Horizontal bar chart</li> <li>Pie chart</li> <li>Line chart</li> <li>Scatter plot</li> </ul>"},{"location":"engines/observable/#chart-control","title":"Chart control","text":"<p>The chart engine provides the following chart control options:</p> <ul> <li>Take a screenshot of the chart to download as an SVG image</li> </ul>"},{"location":"engines/observable/bar/","title":"Bar chart","text":"<p>The bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. For a horizontal bar chart, use the <code>Horizontal bar chart</code> chart type.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Scatter</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Invert X-axis             (<code>invert_x</code>)                        <p>Invert the X-axis</p> <p>Type: <code>bool</code></p>              Invert Y-axis             (<code>invert_y</code>)                        <p>Invert the Y-axis</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Fill             (<code>fill</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/observable/hbar/","title":"Horizontal Bar chart","text":"<p>The horizontal bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars are plotted horizontally.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Scatter</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Invert X-axis             (<code>invert_x</code>)                        <p>Invert the X-axis</p> <p>Type: <code>bool</code></p>              Invert Y-axis             (<code>invert_y</code>)                        <p>Invert the Y-axis</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Fill             (<code>fill</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/observable/line/","title":"Line chart","text":"<p>The line chart is a chart that displays information as a series of data points called 'markers' connected by straight line segments. It is useful for showing trends over time.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Scatter</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select one or more columns for the Y-axis</p> <p>Type: <code>List[str]</code></p>              Invert X-axis             (<code>invert_x</code>)                        <p>Invert the X-axis</p> <p>Type: <code>bool</code></p>              Invert Y-axis             (<code>invert_y</code>)                        <p>Invert the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Split by years             (<code>split_data</code>)                        <p>Split data into different columns by years based on datetime column stated for the x-axis</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Break the chart             (<code>break_chart</code>)                        <p>Break the graph at missing values</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Chart Y axe right label             (<code>y_axis_label_right</code>)                        <p>Label for the Y-axis on the right side</p> <p>Type: <code>str</code></p>"},{"location":"engines/observable/pie/","title":"Pie chart","text":"<p>The pie chart is a circular statistical graphic that is divided into slices to illustrate numerical proportions. The arc length of each slice is proportional to the quantity it represents.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Scatter</code> </p>              Values             (<code>values</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Names             (<code>names</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>              Inner Radius             (<code>innerRadius</code>)                        <p></p> <p>Type: <code>number</code></p>              Stroke Width             (<code>strokeWidth</code>)                        <p>Works only if inner radius is lower than 0</p> <p>Type: <code></code></p>              Font Size             (<code>fontSize</code>)                        <p></p> <p>Type: <code></code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Width             (<code>width</code>)                        <p>Width of the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>640</code></p>              Height             (<code>height</code>)                        <p>Height of the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>400</code></p>"},{"location":"engines/observable/scatter/","title":"Scatter plot","text":"<p>The scatter plot is a chart that uses Cartesian coordinates to display values for two variables for a set of data. The data points are represented as individual dots.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Line</code>,                                       <code>Pie</code>,                                       <code>Scatter</code> </p>              Size Max             (<code>size_max</code>)                        <p>Maximum size of dots or bubbles</p> <p>Type: <code>int</code></p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/plotly/","title":"Plotly chart engine","text":"<p>The <code>Plotly</code> chart engine supports the following chart types:</p> <ul> <li>Bar chart</li> <li>Horizontal bar chart</li> <li>Pie chart</li> <li>Line chart</li> <li>Scatter plot</li> </ul>"},{"location":"engines/plotly/#chart-control","title":"Chart control","text":"<p>The chart engine provides the following chart control options:</p> <ul> <li>Take a screenshot of the chart to download as a PNG image</li> </ul>"},{"location":"engines/plotly/bar/","title":"Bar chart","text":"<p>The bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars can be plotted vertically or horizontally. For a horizontal bar chart, use the <code>Horizontal bar chart</code> chart type.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/plotly/choropleth/","title":"Choropleth Map","text":"<p>The choropleth map is a thematic map in which areas are shaded or patterned in proportion to the value of a variable being represented. It is useful for visualizing data that varies across geographic regions.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Infer ISO alpha-3 country code             (<code>infer_iso_a3</code>)                        <p>Try to infer the ISO_A3 code from the country name.</p> <p>Type: <code>bool</code></p>              Projection             (<code>projection</code>)                               [Required] <p>Set the map projection type.</p> <p>Type: <code>text</code></p> <p>Default: <code>eckert5</code></p> <p>Choices:                                      <code>airy</code>,                                       <code>aitoff</code>,                                       <code>albers</code>,                                       <code>albers usa</code>,                                       <code>august</code>,                                       <code>azimuthal equal area</code>,                                       <code>azimuthal equidistant</code>,                                       <code>baker</code>,                                       <code>bertin1953</code>,                                       <code>boggs</code>,                                       <code>bonne</code>,                                       <code>bottomley</code>,                                       <code>bromley</code>,                                       <code>collignon</code>,                                       <code>conic conformal</code>,                                       <code>conic equal area</code>,                                       <code>conic equidistant</code>,                                       <code>craig</code>,                                       <code>craster</code>,                                       <code>cylindrical equalarea</code>,                                       <code>cylindrical stereographic</code>,                                       <code>eckert1</code>,                                       <code>eckert2</code>,                                       <code>eckert3</code>,                                       <code>eckert4</code>,                                       <code>eckert5</code>,                                       <code>eckert6</code>,                                       <code>eisenlohr</code>,                                       <code>equal earth</code>,                                       <code>equirectangular</code>,                                       <code>fahey</code>,                                       <code>foucaut</code>,                                       <code>foucaut sinusoidal</code>,                                       <code>ginzburg4</code>,                                       <code>ginzburg5</code>,                                       <code>ginzburg6</code>,                                       <code>ginzburg8</code>,                                       <code>ginzburg9</code>,                                       <code>gnomonic</code>,                                       <code>gringorten</code>,                                       <code>gringorten quincuncial</code>,                                       <code>guyou</code>,                                       <code>hammer</code>,                                       <code>hill</code>,                                       <code>homolosine</code>,                                       <code>hufnagel</code>,                                       <code>hyperelliptical</code>,                                       <code>kavrayskiy7</code>,                                       <code>lagrange</code>,                                       <code>larrivee</code>,                                       <code>laskowski</code>,                                       <code>loximuthal</code>,                                       <code>mercator</code>,                                       <code>miller</code>,                                       <code>mollweide</code>,                                       <code>mt flat polar parabolic</code>,                                       <code>mt flat polar quartic</code>,                                       <code>mt flat polar sinusoidal</code>,                                       <code>natural earth</code>,                                       <code>natural earth1</code>,                                       <code>natural earth2</code>,                                       <code>nell hammer</code>,                                       <code>nicolosi</code>,                                       <code>orthographic</code>,                                       <code>patterson</code>,                                       <code>peirce quincuncial</code>,                                       <code>polyconic</code>,                                       <code>rectangular polyconic</code>,                                       <code>robinson</code>,                                       <code>satellite</code>,                                       <code>sinu mollweide</code>,                                       <code>sinusoidal</code>,                                       <code>stereographic</code>,                                       <code>times</code>,                                       <code>transverse mercator</code>,                                       <code>van der grinten</code>,                                       <code>van der grinten2</code>,                                       <code>van der grinten3</code>,                                       <code>van der grinten4</code>,                                       <code>wagner4</code>,                                       <code>wagner6</code>,                                       <code>wiechel</code>,                                       <code>winkel tripel</code>,                                       <code>winkel3</code> </p>              Location             (<code>location_mode</code>)                        <p>Set the location to display on the map.</p> <p>Type: <code>text</code></p> <p>Default: <code>world</code></p> <p>Choices:                                      <code>World</code>,                                       <code>Europe</code>,                                       <code>North America</code>,                                       <code>South America</code>,                                       <code>Africa</code>,                                       <code>Asia</code>,                                       <code>Oceania (Australia &amp; Pacific Islands)</code> </p>              Color Scale             (<code>color_scale</code>)                        <p>Set the color scale for the choropleth map.</p> <p>Type: <code>text</code></p> <p>Default: <code>blue</code></p> <p>Choices:                                      <code>Aazure</code>,                                       <code>Aggrnyl</code>,                                       <code>Agsunset</code>,                                       <code>Blackbody</code>,                                       <code>Bluered</code>,                                       <code>Blues</code>,                                       <code>Blugrn</code>,                                       <code>Bluyl</code>,                                       <code>Brwnyl</code>,                                       <code>Bugn</code>,                                       <code>Bupu</code>,                                       <code>Burg</code>,                                       <code>Burgyl</code>,                                       <code>Cividis</code>,                                       <code>Darkmint</code>,                                       <code>Electric</code>,                                       <code>Emrld</code>,                                       <code>Gnbu</code>,                                       <code>Greens</code>,                                       <code>Greys</code>,                                       <code>Hot</code>,                                       <code>Inferno</code>,                                       <code>Jet</code>,                                       <code>Magenta</code>,                                       <code>Magma</code>,                                       <code>Mint</code>,                                       <code>Orrd</code>,                                       <code>Oranges</code>,                                       <code>Oryel</code>,                                       <code>Peach</code>,                                       <code>Pinkyl</code>,                                       <code>Plasma</code>,                                       <code>Plotly3</code>,                                       <code>Pubu</code>,                                       <code>Pubugn</code>,                                       <code>Purd</code>,                                       <code>Purp</code>,                                       <code>Purples</code>,                                       <code>Purpor</code>,                                       <code>Rainbow</code>,                                       <code>Rdbu</code>,                                       <code>Rdpu</code>,                                       <code>Redor</code>,                                       <code>Reds</code>,                                       <code>Sunset</code>,                                       <code>Sunsetdark</code>,                                       <code>Teal</code>,                                       <code>Tealgrn</code>,                                       <code>Turbo</code>,                                       <code>Viridis</code>,                                       <code>Ylgn</code>,                                       <code>Ylgnbu</code>,                                       <code>Ylorbr</code>,                                       <code>Ylorrd</code>,                                       <code>Algae</code>,                                       <code>Amp</code>,                                       <code>Deep</code>,                                       <code>Dense</code>,                                       <code>Gray</code>,                                       <code>Haline</code>,                                       <code>Ice</code>,                                       <code>Matter</code>,                                       <code>Solar</code>,                                       <code>Speed</code>,                                       <code>Tempo</code>,                                       <code>Thermal</code>,                                       <code>Turbid</code>,                                       <code>Armyrose</code>,                                       <code>Brbg</code>,                                       <code>Earth</code>,                                       <code>Fall</code>,                                       <code>Geyser</code>,                                       <code>Prgn</code>,                                       <code>Piyg</code>,                                       <code>Picnic</code>,                                       <code>Portland</code>,                                       <code>Puor</code>,                                       <code>Rdgy</code>,                                       <code>Rdylbu</code>,                                       <code>Rdylgn</code>,                                       <code>Spectral</code>,                                       <code>Tealrose</code>,                                       <code>Temps</code>,                                       <code>Tropic</code>,                                       <code>Balance</code>,                                       <code>Curl</code>,                                       <code>Delta</code>,                                       <code>Oxy</code>,                                       <code>Edge</code>,                                       <code>Hsv</code>,                                       <code>Icefire</code>,                                       <code>Phase</code>,                                       <code>Twilight</code>,                                       <code>Mrybm</code>,                                       <code>Mygbm</code> </p>              Show Scale Ticks             (<code>show_scale_ticks</code>)                        <p>Show the scale ticks on the colorbar.</p> <p>Type: <code>bool</code></p> <p>Default: <code>True</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>"},{"location":"engines/plotly/hbar/","title":"Horizontal Bar chart","text":"<p>The horizontal bar chart is a chart with rectangular bars with lengths proportional to the values that they represent. The bars are plotted horizontally.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/plotly/line/","title":"Line chart","text":"<p>The line chart is a chart that displays information as a series of data points called 'markers' connected by straight line segments. It is useful for showing trends over time.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"engines/plotly/pie/","title":"Pie chart","text":"<p>The pie chart is a circular statistical graphic that is divided into slices to illustrate numerical proportions. The arc length of each slice is proportional to the quantity it represents.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              Values             (<code>values</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Names             (<code>names</code>)                               [Required] <p></p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>"},{"location":"engines/plotly/scatter/","title":"Scatter Plot","text":"<p>The scatter plot is a chart that uses Cartesian coordinates to display values for two variables for a set of data. The data points are represented as individual dots.</p>              Title             (<code>title</code>)                        <p>Title of the chart view</p> <p>Type: <code>str</code></p> <p>Default: <code>Chart</code></p>              Description             (<code>description</code>)                        <p>Description of the chart view</p> <p>Type: <code>str</code></p>              Engine             (<code>engine</code>)                               [Required] <p>Select the chart engine to use</p> <p>Type: <code>str</code></p> <p>Default: <code>plotly</code></p> <p>Choices:                                      <code>plotly</code>,                                       <code>observable</code>,                                       <code>chartjs</code> </p>              Type             (<code>type</code>)                               [Required] <p>Select the type of the chart, e.g. Line, Bar, Scatter, etc.</p> <p>Type: <code>str</code></p> <p>Default: <code>Line</code></p> <p>Choices:                                      <code>Bar</code>,                                       <code>Horizontal Bar</code>,                                       <code>Pie</code>,                                       <code>Line</code>,                                       <code>Scatter</code>,                                       <code>Choropleth</code> </p>              X Axis             (<code>x</code>)                               [Required] <p>Select a column for the X-axes</p> <p>Type: <code>str</code></p>              Y Axis             (<code>y</code>)                               [Required] <p>Select a column for the Y-axis</p> <p>Type: <code>str</code></p>              Log-scale X-axis             (<code>log_x</code>)                        <p>Use log scale for the X-axis</p> <p>Type: <code>bool</code></p>              Log-scale Y-axis             (<code>log_y</code>)                        <p>Use log scale for the Y-axis</p> <p>Type: <code>bool</code></p>              Sort X-axis             (<code>sort_x</code>)                        <p>Sort the X-axis values</p> <p>Type: <code>bool</code></p>              Sort Y-axis             (<code>sort_y</code>)                        <p>Sort the Y-axis values</p> <p>Type: <code>bool</code></p>              Skip N/A and NULL values             (<code>skip_null_values</code>)                        <p>Entries of the data with missing values will not be                             graphed or will be skipped</p> <p>Type: <code>bool</code></p>              Size             (<code>size</code>)                               [Required] <p>Select a column for the size</p> <p>Type: <code>str</code></p>              Size Max             (<code>size_max</code>)                        <p>Maximum size of dots or bubbles</p> <p>Type: <code>int</code></p>              Limit             (<code>limit</code>)                        <p>Limit the number of rows to show in the chart</p> <p>Type: <code>int</code></p> <p>Default: <code>1000</code></p>              Chart Title             (<code>chart_title</code>)                        <p>Title of the chart itself</p> <p>Type: <code>str</code></p>              Chart X axe label             (<code>x_axis_label</code>)                        <p>Label for the X-axis</p> <p>Type: <code>str</code></p>              Chart Y axe label             (<code>y_axis_label</code>)                        <p>Label for the Y-axis</p> <p>Type: <code>str</code></p>              Color             (<code>color</code>)                        <p>Select a column for the color</p> <p>Type: <code>str</code></p>              Animation Frame             (<code>animation_frame</code>)                        <p>Select a column for the animation frame</p> <p>Type: <code>str</code></p>              Opacity             (<code>opacity</code>)                        <p>Opacity level of the chart</p> <p>Type: <code>float</code></p> <p>Default: <code>1</code></p>"},{"location":"fetchers/","title":"Fetchers","text":"<p>Fetchers are responsible for fetching data from different sources (DataStore, URL, file system, hardcoded data).</p> <p>For the current implementation, we're working with resources that are uploaded to the DataStore, so the fetcher will be responsible for fetching the data from the DataStore.</p> <p>But it might come in handy to have fetchers for other sources, like URL, file system, etc.</p>"},{"location":"fetchers/#implementing-new-fetchers","title":"Implementing new fetchers","text":"<p>To register new fetchers, you need to create a new class that inherits from <code>DataFetcherStrategy</code> and implements the <code>fetch_data</code> and <code>make_cache_key</code> methods.</p> <p>The <code>fetch_data</code> method should return a <code>pandas</code> <code>DataFrame</code> object with the data that should be displayed in the chart.</p> <p>The <code>make_cache_key</code> method should return a unique string that will be used as a key to store the data in the cache.</p> <p>See the base class <code>DataFetcherStrategy</code> for more information.</p>"},{"location":"fetchers/base/","title":"Base Fetcher","text":"<p>All fetchers must inherit from the <code>DataFetcherStrategy</code> class. This class provides the basic structure for fetchers and defines the methods that must be implemented by all fetchers.</p>"},{"location":"fetchers/base/#charts.fetchers.DataFetcherStrategy.fetch_data","title":"<code>fetch_data()</code>  <code>abstractmethod</code>","text":"<p>This method should implement the data fetch logic.</p> <p>All the necessary information should be provided in the constructor.</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: The fetched data</p>"},{"location":"fetchers/base/#charts.fetchers.DataFetcherStrategy.get_cached_data","title":"<code>get_cached_data()</code>","text":"<p>Fetch data from the cache.</p> RETURNS DESCRIPTION <code>DataFrame | None</code> <p>pd.DataFrame | None: The cached data or None if not found</p>"},{"location":"fetchers/base/#charts.fetchers.DataFetcherStrategy.invalidate_cache","title":"<code>invalidate_cache()</code>","text":"<p>Invalidate the cache for the data fetcher.</p>"},{"location":"fetchers/base/#charts.fetchers.DataFetcherStrategy.make_cache_key","title":"<code>make_cache_key()</code>  <code>abstractmethod</code>","text":"<p>This method should generate a cache key for the fetched data.</p> <p>Every data fetcher should implement this method to support caching.</p> RETURNS DESCRIPTION <code>str</code> <p>The cache key</p> <p> TYPE: <code>str</code> </p>"},{"location":"fetchers/datastore/","title":"Datastore Fetcher","text":"<p>Fetch dataset resource data from the DataStore.</p> <p>This fetcher is used to fetch data from the DataStore using the resource ID.</p>"},{"location":"fetchers/datastore/#charts.fetchers.DatastoreDataFetcher.__init__","title":"<code>__init__(resource_id, limit=2000000, cache_strategy=None)</code>","text":"<p>Initialize the DatastoreDataFetcher.</p> PARAMETER DESCRIPTION <code>resource_id</code> <p>The ID of the resource to fetch data for.</p> <p> TYPE: <code>str</code> </p> <code>limit</code> <p>The maximum number of rows to fetch.</p> <p> TYPE: <code>int</code> DEFAULT: <code>2000000</code> </p> <code>cache_strategy</code> <p>The cache strategy to use. If not provided, the configured cache strategy will be used.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"fetchers/datastore/#charts.fetchers.DatastoreDataFetcher.fetch_data","title":"<code>fetch_data()</code>","text":"<p>Fetch data from the DataStore.</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: Data from the DataStore</p>"},{"location":"fetchers/datastore/#charts.fetchers.DatastoreDataFetcher.make_cache_key","title":"<code>make_cache_key()</code>","text":"<p>Generate a cache key for the DataStore data fetcher.</p> <p>Uses the resource ID as the part of a cache key.</p> RETURNS DESCRIPTION <code>str</code> <p>The cache key</p> <p> TYPE: <code>str</code> </p>"},{"location":"fetchers/file/","title":"File System Data Fetcher","text":"<p>               Bases: <code>DataFetcherStrategy</code></p> <p>Fetch data from the file system.</p> <p>This fetcher is used to fetch data from a file on the file system.</p> Supported formats <ul> <li><code>CSV</code></li> <li><code>XLSX</code></li> <li><code>XLS</code></li> <li><code>XML</code></li> </ul>"},{"location":"fetchers/file/#charts.fetchers.FileSystemDataFetcher.__init__","title":"<code>__init__(file_path, file_format='csv', cache_strategy=None)</code>","text":"<p>Initialize the FileSystemDataFetcher.</p> PARAMETER DESCRIPTION <code>file_path</code> <p>The path to the file.</p> <p> TYPE: <code>str</code> </p> <code>file_format</code> <p>The format of the file.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'csv'</code> </p> <code>cache_strategy</code> <p>The cache strategy to use. If not provided, the configured cache strategy will be used.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"fetchers/file/#charts.fetchers.FileSystemDataFetcher.fetch_data","title":"<code>fetch_data()</code>","text":"<p>Fetch data from the file system.</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: Data fetched from the file system</p>"},{"location":"fetchers/file/#charts.fetchers.FileSystemDataFetcher.make_cache_key","title":"<code>make_cache_key()</code>","text":"<p>Generate a cache key for the FileSystem data fetcher.</p> <p>Uses the file path as the part of a cache key.</p> RETURNS DESCRIPTION <code>str</code> <p>The cache key</p> <p> TYPE: <code>str</code> </p>"},{"location":"fetchers/hardcode/","title":"Hardcoded Data Fetcher","text":"<p>               Bases: <code>DataFetcherStrategy</code></p> <p>Fetch hardcoded data.</p> <p>This fetcher is used to make a dataframe from hardcoded data, so you can build a chart from it.</p>"},{"location":"fetchers/hardcode/#charts.fetchers.HardcodedDataFetcher.__init__","title":"<code>__init__(data)</code>","text":"<p>Initialize the HardcodedDataFetcher.</p> PARAMETER DESCRIPTION <code>data</code> <p>The hardcoded data.</p> <p> TYPE: <code>dict[str, list[Any]]</code> </p>"},{"location":"fetchers/hardcode/#charts.fetchers.HardcodedDataFetcher.fetch_data","title":"<code>fetch_data()</code>","text":"<p>Transform arbitrary data into a dataframe.</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: The hardcoded data as a dataframe</p>"},{"location":"fetchers/hardcode/#charts.fetchers.HardcodedDataFetcher.invalidate_cache","title":"<code>invalidate_cache()</code>","text":"<p>Hardcoded data is not cached</p>"},{"location":"fetchers/hardcode/#charts.fetchers.HardcodedDataFetcher.make_cache_key","title":"<code>make_cache_key()</code>","text":"<p>Hardcoded data is not cached</p>"},{"location":"fetchers/url/","title":"URL Data Fetcher","text":"<p>               Bases: <code>DataFetcherStrategy</code></p> <p>Fetch data from a URL.</p> <p>This fetcher is used to fetch data from a URL.</p> Supported formats <ul> <li><code>CSV</code></li> <li><code>XLSX</code></li> <li><code>XLS</code></li> <li><code>XML</code></li> </ul>"},{"location":"fetchers/url/#charts.fetchers.URLDataFetcher.__init__","title":"<code>__init__(url, file_format='csv', timeout=0, cache_strategy=None)</code>","text":"<p>Initialize the URLDataFetcher.</p> PARAMETER DESCRIPTION <code>url</code> <p>The URL to fetch data from.</p> <p> TYPE: <code>str</code> </p> <code>file_format</code> <p>The format of the file.</p> <p> TYPE: <code>str</code> DEFAULT: <code>'csv'</code> </p> <code>timeout</code> <p>The timeout for the request in seconds.</p> <p> TYPE: <code>int</code> DEFAULT: <code>0</code> </p> <code>cache_strategy</code> <p>The cache strategy to use. If not provided, the configured cache strategy will be used.</p> <p> TYPE: <code>str</code> DEFAULT: <code>None</code> </p>"},{"location":"fetchers/url/#charts.fetchers.URLDataFetcher.fetch_data","title":"<code>fetch_data()</code>","text":"<p>Fetch data from the URL.</p> RETURNS DESCRIPTION <code>DataFrame</code> <p>pd.DataFrame: Data fetched from the URL</p>"},{"location":"fetchers/url/#charts.fetchers.URLDataFetcher.make_cache_key","title":"<code>make_cache_key()</code>","text":"<p>Generate a cache key for the URL data fetcher.</p> <p>Uses the URL as the part of a cache key.</p> RETURNS DESCRIPTION <code>str</code> <p>The cache key</p> <p> TYPE: <code>str</code> </p>"},{"location":"fetchers/url/#charts.fetchers.URLDataFetcher.make_request","title":"<code>make_request()</code>","text":"<p>Make a request to the URL and return the response content.</p> RETURNS DESCRIPTION <code>bytes</code> <p>The response content</p> <p> TYPE: <code>bytes</code> </p> RAISES DESCRIPTION <code>DataFetchError</code> <p>If an error occurs during the request</p>"}]}