[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]
name = "ckanext-charts"
description = ""
keywords = ["CKAN", "charts", "visualization"]
readme = "README.md"
authors = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
    {name = "Sergey Motornyuk", email = "sergey.motornyuk@linkdigital.com.au"},
    {name = "Oleksandr Cherniavskyi", email = "mutantsan@gmail.com"},
]
maintainers = [
    {name = "DataShades", email = "datashades@linkdigital.com.au"},
]
classifiers = [
    "Development Status :: 4 - Beta",
    "License :: OSI Approved :: GNU Affero General Public License v3 or later (AGPLv3+)",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.8",
]
dependencies = [
             "typing-extensions>=4.3.0",
             "pandas>=2.0.0,<=2.1.4",
             "plotly>=5.21.0,<6.0.0",
             "redis>=5.0.0,<6.0.0",
             "openpyxl>=3.1.2,<4.0.0",
             "xlrd>=2.0.1,<3.0.0",
             "ckanext-scheming",
]
license = {text = "AGPL"}
requires-python = ">=3.8"
version = "1.1.2"

[project.optional-dependencies]
pyarrow = ["pyarrow>=16.0.0,<17.0.0"]
test = ["pytest-ckan", "ckanext-toolbelt", "requests-mock"]
dev = ["pytest-ckan", "ckanext-toolbelt", "requests-mock"]

[project.entry-points."ckan.plugins"]
charts_view = "ckanext.charts.plugin:ChartsViewPlugin"
charts_builder_view = "ckanext.charts.plugin:ChartsBuilderViewPlugin"

[project.entry-points."babel.extractors"]
ckan = "ckan.lib.extract:extract_ckan"

[project.urls]
Homepage = "https://github.com/DataShades/ckanext-charts"

[tool.setuptools.packages]
find = {}


[tool.black]
# line-length = 88
# preview = true

[tool.ruff]
target-version = "py38"
select = [
    "B",   # likely bugs and design problems
    "BLE", # do not catch blind exception
    "C40", # better list/set/dict comprehensions
    "C90", # check McCabe complexity
    "COM", # trailing commas
    "E",   # pycodestyle error
    "W",   # pycodestyle warning
    "F",   # pyflakes
    "G",   # format strings for logging statements
    "N",   # naming conventions
    "PL",  # pylint
    "PT",  # pytest style
    "PIE", # misc lints
    "Q",   # preferred quoting style
    "RET", # improvements for return statements
    "RSE", # improvements for rise statements
    # "S",  # security testing
    "SIM", # simplify code
    "T10", # debugging statements
    "T20", # print statements
    "TID", # tidier imports
    "TRY", # better exceptions
    "UP",  # upgrade syntax for newer versions of the language
]
ignore = [
    "E712",    # comparison to bool: violated by SQLAlchemy filters
    "PT004",   # fixture does not return anything, add leading underscore: violated by clean_db
    "PLC1901", # simplify comparison to empty string: violated by SQLAlchemy filters
    "TRY003",  # allow providing an error message to exception instance
]

[tool.ruff.per-file-ignores]
"ckanext/charts/tests*" = ["S", "PL"]
"ckanext/charts/logic/schema.py" = ["PLR0913"]
"ckanext/charts/chart_builders/plotly.py" = ["C901", "PLR0912"]

[tool.isort]
known_ckan = "ckan"
known_ckanext = "ckanext"
known_self = "ckanext.charts"
sections = "FUTURE,STDLIB,FIRSTPARTY,THIRDPARTY,CKAN,CKANEXT,SELF,LOCALFOLDER"
profile = "black"

[tool.pytest.ini_options]
addopts = "--ckan-ini test.ini"
filterwarnings = [
    "ignore::DeprecationWarning",
]

[tool.pyright]
pythonVersion = "3.8"
include = ["ckanext"]
exclude = ["**/test*", "**/migration"]
strict = []

strictParameterNoneValue = true

# Check the meaning of rules here
# https://github.com/microsoft/pyright/blob/main/docs/configuration.md
reportFunctionMemberAccess = true          # non-standard member accesses for functions
reportMissingImports = true
reportMissingModuleSource = true
reportMissingTypeStubs = false
reportImportCycles = true
reportUnusedImport = true
reportUnusedClass = true
reportUnusedFunction = true
reportUnusedVariable = true
reportDuplicateImport = true
reportOptionalSubscript = true
reportOptionalMemberAccess = true
reportOptionalCall = true
reportOptionalIterable = true
reportOptionalContextManager = true
reportOptionalOperand = true
reportTypedDictNotRequiredAccess = false   # Context won't work with this rule
reportConstantRedefinition = true
reportIncompatibleMethodOverride = true
reportIncompatibleVariableOverride = true
reportOverlappingOverload = true
reportUntypedFunctionDecorator = false
reportUnknownParameterType = true
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportMissingTypeArgument = true
reportInvalidTypeVarUse = true
reportCallInDefaultInitializer = true
reportUnknownVariableType = true
reportUntypedBaseClass = true
reportUnnecessaryIsInstance = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportAssertAlwaysTrue = true
reportSelfClsParameterName = true
reportUnusedCallResult = false             # allow function calls for side-effect only
useLibraryCodeForTypes = true
reportGeneralTypeIssues = true
reportPropertyTypeMismatch = true
reportWildcardImportFromLibrary = true
reportUntypedClassDecorator = false
reportUntypedNamedTuple = true
reportPrivateUsage = true
reportPrivateImportUsage = true
reportInconsistentConstructor = true
reportMissingSuperCall = false
reportUninitializedInstanceVariable = true
reportInvalidStringEscapeSequence = true
reportMissingParameterType = true
reportImplicitStringConcatenation = false
reportUndefinedVariable = true
reportUnboundVariable = true
reportInvalidStubStatement = true
reportIncompleteStub = true
reportUnsupportedDunderAll = true
reportUnusedCoroutine = true
reportUnnecessaryTypeIgnoreComment = true
reportMatchNotExhaustive = true
